#!/usr/bin/python
# -*- encoding: utf-8 -*-
'''
Training arguments.

@Time    :   2023/11/06
@Author  :   Ma (Ma787639046@outlook.com)
'''

from dataclasses import dataclass, field
from typing import Optional, Union, List, Dict
import os
from transformers import TrainingArguments

@dataclass
class DataArguments:
    """
    Arguments pertaining to what data we are going to input our model for training and eval.
    """

    dataset_name: Optional[str] = field(
        default=None, metadata={"help": "The name of the dataset to use (via the datasets library)."}
    )
    corpus_dir: Optional[str] = field(
        default=None, metadata={"help": "Path to train triples directory"}
    )
    corpus_path: Optional[str] = field(
        default=None, metadata={"help": "Path to train triples data"}
    )
    overwrite_cache: bool = field(
        default=False, metadata={"help": "Overwrite the cached training and evaluation sets"}
    )
    max_seq_length: int = field(
        default=512,
        metadata={
            "help": "The maximum total input sequence length after tokenization. Sequences longer "
                    "than this will be truncated, sequences shorter will be padded."
        },
    )
    pad_to_max_length: Union[bool] = field(
        default=False,
        metadata={
            "help": "Whether to pad all samples to `max_seq_length`. "
                    "If False, will pad the samples dynamically when batching to the maximum length in the batch."
        },
    )

    train_n_passages: int = field(default=8)
    positive_passage_no_shuffle: bool = field(
        default=False, metadata={"help": "always use the first positive passage"})
    negative_passage_no_shuffle: bool = field(
        default=False, metadata={"help": "always use the first negative passages"})

    # For Encode of Reranking task
    tsv_ranks_path: Optional[str] = field(
        default=None,  metadata={"help": "Path to .ranks.tsv generated by dual-encoder, format [qid, pid, score]"}
    )
    query_collection: Optional[str] = field(
        default=None, metadata={"help": "The name of the dataset to use (via the datasets library)."}
    )
    passage_collection: Optional[str] = field(
        default=None, metadata={"help": "The name of the dataset to use (via the datasets library)."}
    )
    reranking_depth:  int = field(
        default=1000,
        metadata={
            "help": "Reranking depth, will only re-score `top-depth` per qid using CrossEncoder"
        },
    )
    rerank_save_path: str = field(default=None, metadata={"help": "Output tsv path to save the reranked results"})
    
    def __post_init__(self):
        if self.dataset_name is not None:
            info = self.dataset_name.split('/')
            self.dataset_split = info[-1] if len(info) == 3 else 'train'
            self.dataset_name = "/".join(info[:-1]) if len(info) == 3 else '/'.join(info)
            self.dataset_language = 'default'
            if ':' in self.dataset_name:
                self.dataset_name, self.dataset_language = self.dataset_name.split(':')
        else:
            self.dataset_name = 'json'
            self.dataset_split = 'train'
            self.dataset_language = 'default'

        if self.corpus_path is not None:
            self.corpus_path = [self.corpus_path]
        elif self.corpus_dir is not None:
                files = os.listdir(self.corpus_dir)
                self.corpus_path = [
                    os.path.join(self.corpus_dir, f)
                    for f in files
                    if f.endswith('json') or f.endswith('jsonl')
                ]

@dataclass
class ModelArguments:
    """
    Arguments pertaining to which model/config/tokenizer we are going to fine-tune, or train from scratch.
    """

    model_name_or_path: Optional[str] = field(
        default=None,
        metadata={
            "help": "The model checkpoint for weights initialization."
                    "Don't set if you want to train a model from scratch."
        },
    )
    model_type: Optional[str] = field(
        default='sentence-transformers',
        metadata={
            "help": "The model archeticture used in training."
                    "Choose among ['transformers', 'sentence-transformers', 'instructor']."
        },
    )
    config_name: Optional[str] = field(
        default=None, metadata={"help": "Pretrained config name or path if not the same as model_name"}
    )
    tokenizer_name: Optional[str] = field(
        default=None, metadata={"help": "Pretrained tokenizer name or path if not the same as model_name"}
    )
    cache_dir: Optional[str] = field(
        default=None,
        metadata={"help": "Where do you want to store the pretrained models downloaded from huggingface.co"},
    )
    use_fast_tokenizer: bool = field(
        default=True,
        metadata={"help": "Whether to use one of the fast tokenizer (backed by the tokenizers library) or not."},
    )
    temperature: float = field(
        default=1.0,
        metadata={"help": "Temperature scale for bi-encoder clloss and reranker celoss."}
    )
    sigmoid_normalize: bool = field(
        default=False,
        metadata={
            "help": "Whether to normalize the output to range [0, 1] with `nn.Sigmoid()`."
        },
    )


@dataclass
class CLTrainingArguments(TrainingArguments):
    min_lr_ratio: float = field(default=0.0)
    
    logging_path: Optional[str] = field(
        default=None, metadata={"help": "Path for redirecting Transformers logs to local file."}
    )

    dataloader_drop_last: bool = field(
        default=True, metadata={"help": "Drop the last incomplete batch if it is not divisible by the batch size."}
    )

    def __post_init__(self):
        super().__post_init__()

        if self.resume_from_checkpoint is not None:
            if self.resume_from_checkpoint.lower() in ["false", 'f']:
                self.resume_from_checkpoint = None
            elif self.resume_from_checkpoint.lower() in ["true", 't']:
                self.resume_from_checkpoint = True
